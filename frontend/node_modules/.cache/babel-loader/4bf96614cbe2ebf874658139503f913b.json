{"remainingRequest":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js!/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/woli/Projects/DataRoom/frontend/src/App.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/woli/Projects/DataRoom/frontend/src/App.vue","mtime":1611940395377},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js","mtime":1607646038462},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1607646042274}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/woli/Projects/DataRoom/frontend/src/App.vue"],"names":[],"mappings":"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","sourcesContent":["<!--todo: po usunieciu klienta z budynku trzeba go usunac z kazdego xmla-->\n\n\n<template>\n  <AuthView v-if=\"session_token === null\" />\n  <AppView v-if=\"session_token !== null\" />\n</template>\n\n<script>\nimport AuthView from \"@/components/AuthView.vue\";\nimport AppView from \"@/components/AppView\";\nimport axios from \"axios\";\n\n\nexport default {\n  name: 'App',\n  computed: {\n    console: () => console\n  },\n  components: {\n    AppView,\n    AuthView,\n  },\n  methods: {\n    //AUTH REQUESTS//\n    async AUTH_registerUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/create'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_loginUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/login'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_sendPasswordResetEmail() {\n      let result = [false, ''];\n      let email = document.getElementById('passwordEmail').value;\n      await axios.get(this.backend_url.concat('/mail/', email, '/send/link')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_logoutUser() {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/client/', this.session_token, '/logout')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_changeUserEmail(new_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/email'), {email: new_email}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_changeUserPassword(new_password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/password'), {password: new_password}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_updateUserProfile(first_name, second_name, phone_number, birth_date) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/profile'), {\n        first_name: first_name,\n        second_name: second_name,\n        phone_number: phone_number,\n        birth_date: birth_date\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //USER REQUESTS//\n    async USER_getUserProfile() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/client/', this.session_token, '/get/profile')).then((response) => {\n        if (response.status === 200)\n          result[0] = true\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async USER_uploadFile(building_name, floor_name, room_name, file) {\n      let result = [false, ''];\n      console.log(file);\n      let formData = new FormData();\n      formData.append('file', )\n      await axios.post(this.backend_url.concat('/application/user/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/upload'), formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingList() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/getlist')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n\n    },\n    async createBuilding(building_name) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/user/', this.session_token, '/create/building'), {\n        name: building_name,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingFloors(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token,'/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getFloorRooms(floorName, buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/get/rooms')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getFilesInRoom(room_name, building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/get/files')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //ADMIN REQUESTS//\n    async ADMIN_addFloorToBuilding(buildingName, floorName, floorPermissions) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/create/floor'), {\n        floorName: floorName,\n        defaultPermissions: floorPermissions,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllFloorsForBuilding(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeFloor(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllUsersForBuilding(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/get/users')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeUserFromBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/', target_email,'/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_addUserToBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/add'), {\n        target_email: target_email\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getFullFloorData(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/get/data'),).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_update_floor_xml_document(building_name, floor_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getBuildingXML(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/get/data')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n},\n    async ADMIN_update_building_xml_document(building_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //LEVEL_ADMIN REQUESTS//\n    async LEVELADMIN_deleteRoom(building_name, floor_name, room_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/delete')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result\n    },\n    async LEVELADMIN_createRoom(roomName, floorName, buildingName, sett_public, sett_hidden) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/create/room'), {\n        roomName: roomName,\n        public: sett_public,\n        hidden: sett_hidden\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result;\n    },\n    async LEVELADMIN_get_floor_xml(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/get/data')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data[0]['xml_document'];\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async LEVELADMIN_update_floor_xml(building_name, floor_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async LEVELADMIN_getAllUsersForBuilding(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/get/users')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    }\n  },\n  data() {\n    return {\n      session_token: null,\n      backend_url: 'http://127.0.0.1:5000',\n    }\n  },\n}\n</script>\n\n<style>\nbody {\n  background-image: url('assets/azure-6.jpg');\n}\n</style>\n<!--https://dataroom-301309.ew.r.appspot.com-->"],"sourceRoot":""}]}