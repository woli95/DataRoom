{"remainingRequest":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js!/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/woli/Projects/DataRoom/frontend/src/App.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/woli/Projects/DataRoom/frontend/src/App.vue","mtime":1611699742061},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js","mtime":1607646038462},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1607646042274}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/woli/Projects/DataRoom/frontend/src/App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <AuthView v-if=\"session_token === null\" />\n  <AppView v-if=\"session_token !== null\" />\n</template>\n\n<script>\nimport AuthView from \"@/components/AuthView.vue\";\nimport AppView from \"@/components/AppView\";\nimport axios from \"axios\";\n\n\nexport default {\n  name: 'App',\n  computed: {\n    console: () => console\n  },\n  components: {\n    AppView,\n    AuthView,\n  },\n  methods: {\n    async registerUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/create'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async loginUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/login'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async changeUserEmail(new_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/email'), {email: new_email}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async changeUserPassword(new_password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/password'), {password: new_password}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async updateUserProfile(first_name, second_name, phone_number, birth_date) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/profile'), {\n        first_name: first_name,\n        second_name: second_name,\n        phone_number: phone_number,\n        birth_date: birth_date\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async logoutUser() {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/client/', this.session_token, '/logout')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getUserProfile() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/client/', this.session_token, '/get/profile')).then((response) => {\n        if (response.status === 200)\n          result[0] = true\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async sendPasswordResetEmail() {\n      let result = [false, ''];\n      let email = document.getElementById('passwordEmail').value;\n      await axios.get(this.backend_url.concat('/mail/', email, '/send/link')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n  //  TODO:\n    async getBuildingList() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/getlist')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n\n    },\n    async createBuilding(building_name) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/', this.session_token, '/create/building'), {\n        name: building_name,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingFloors(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token,'/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    ///\n    async getFloorRooms(floorName, buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/get/rooms')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async addRoomToFloor(roomName, floorName, buildingName) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/create/room'), {\n        roomName: roomName\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result;\n    },\n    async getFilesInRoom(room_name, building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/get/files')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    ////\n    async ADMIN_addFloorToBuilding(buildingName, floorName, floorPermissions) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/create/floor'), {\n        floorName: floorName,\n        defaultPermissions: floorPermissions,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllFloorsForBuilding(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeFloor(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllUsersForBuilding(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/get/users')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeUserFromBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/', target_email,'/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_addUserToBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/add'), {\n        target_email: target_email\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getFullFloorData(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/get/data'),).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_update_floor_xml_document(building_name, floor_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    }\n  },\n  data() {\n    return {\n      session_token: null,\n      backend_url: 'http://127.0.0.1:5000',\n    }\n  },\n}\n</script>\n\n<style>\nbody {\n  background-image: url('assets/azure-6.jpg');\n}\n</style>\n<!--https://dataroom-301309.ew.r.appspot.com-->"],"sourceRoot":""}]}