{"remainingRequest":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js!/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/woli/Projects/DataRoom/frontend/src/App.vue?vue&type=template&id=7ba5bd90&bindings={\"console\":\"options\",\"registerUser\":\"options\",\"loginUser\":\"options\",\"changeUserEmail\":\"options\",\"changeUserPassword\":\"options\",\"updateUserProfile\":\"options\",\"logoutUser\":\"options\",\"getUserProfile\":\"options\",\"sendPasswordResetEmail\":\"options\",\"getBuildingList\":\"options\",\"createBuilding\":\"options\",\"getBuildingFloors\":\"options\",\"getFloorRooms\":\"options\",\"addRoomToFloor\":\"options\",\"getFilesInRoom\":\"options\",\"ADMIN_addFloorToBuilding\":\"options\",\"ADMIN_getAllFloorsForBuilding\":\"options\",\"ADMIN_removeFloor\":\"options\",\"session_token\":\"data\",\"backend_url\":\"data\"}","dependencies":[{"path":"/home/woli/Projects/DataRoom/frontend/src/App.vue","mtime":1611604605306},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/babel-loader/lib/index.js","mtime":1607646038462},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1607646042274},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607646038494},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1607646042274}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50IH0gZnJvbSAidnVlIjsKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICB2YXIgX2NvbXBvbmVudF9BdXRoVmlldyA9IF9yZXNvbHZlQ29tcG9uZW50KCJBdXRoVmlldyIpOwoKICB2YXIgX2NvbXBvbmVudF9BcHBWaWV3ID0gX3Jlc29sdmVDb21wb25lbnQoIkFwcFZpZXciKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgWyRkYXRhLnNlc3Npb25fdG9rZW4gPT09IG51bGwgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9BdXRoVmlldywgewogICAga2V5OiAwCiAgfSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCAkZGF0YS5zZXNzaW9uX3Rva2VuICE9PSBudWxsID8gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKF9jb21wb25lbnRfQXBwVmlldywgewogICAga2V5OiAxCiAgfSkpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9"},{"version":3,"sources":["/home/woli/Projects/DataRoom/frontend/src/App.vue"],"names":[],"mappings":";;;;;;sDACkB,KAAA,CAAA,aAAA,KAAa,I,kBAA7B,YAAA,CAA0C,mBAA1C,EAA0C;AAAA,IAAA,GAAA,EAAA;AAAA,GAA1C,C,uCACe,KAAA,CAAA,aAAA,KAAa,I,kBAA5B,YAAA,CAAyC,kBAAzC,EAAyC;AAAA,IAAA,GAAA,EAAA;AAAA,GAAzC,C","sourcesContent":["<template>\n  <AuthView v-if=\"session_token === null\" />\n  <AppView v-if=\"session_token !== null\" />\n</template>\n\n<script>\nimport AuthView from \"@/components/AuthView.vue\";\nimport AppView from \"@/components/AppView\";\nimport axios from \"axios\";\n\n\nexport default {\n  name: 'App',\n  computed: {\n    console: () => console\n  },\n  components: {\n    AppView,\n    AuthView,\n  },\n  methods: {\n    async registerUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/create'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async loginUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/login'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async changeUserEmail(new_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/email'), {email: new_email}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async changeUserPassword(new_password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/password'), {password: new_password}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async updateUserProfile(first_name, second_name, phone_number, birth_date) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/profile'), {\n        first_name: first_name,\n        second_name: second_name,\n        phone_number: phone_number,\n        birth_date: birth_date\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async logoutUser() {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/client/', this.session_token, '/logout')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getUserProfile() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/client/', this.session_token, '/get/profile')).then((response) => {\n        if (response.status === 200)\n          result[0] = true\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async sendPasswordResetEmail() {\n      let result = [false, ''];\n      let email = document.getElementById('passwordEmail').value;\n      await axios.get(this.backend_url.concat('/mail/', email, '/send/link')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n  //  TODO:\n    async getBuildingList() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/getlist')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n\n    },\n    async createBuilding(building_name) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/', this.session_token, '/create/building'), {\n        name: building_name,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingFloors(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token,'/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    ///\n    async getFloorRooms(floorName, buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/get/rooms')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async addRoomToFloor(roomName, floorName, buildingName) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/create/room'), {\n        roomName: roomName\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result;\n    },\n    async getFilesInRoom(room_name, building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/get/files')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    ////\n    async ADMIN_addFloorToBuilding(buildingName, floorName, floorPermissions) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/create/floor'), {\n        floorName: floorName,\n        defaultPermissions: floorPermissions,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllFloorsForBuilding(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeFloor(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    }\n  },\n  data() {\n    return {\n      session_token: null,\n      backend_url: 'http://127.0.0.1:5000',\n    }\n  },\n}\n</script>\n\n<style>\nbody {\n  background-image: url('assets/azure-6.jpg');\n}\n</style>\n<!--https://dataroom-301309.ew.r.appspot.com-->"],"sourceRoot":""}]}