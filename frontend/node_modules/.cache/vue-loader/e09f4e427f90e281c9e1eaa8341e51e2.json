{"remainingRequest":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/woli/Projects/DataRoom/frontend/src/components/enterBuildingDiv.vue?vue&type=style&index=0&id=0c22a0d5&scoped=true&lang=css","dependencies":[{"path":"/home/woli/Projects/DataRoom/frontend/src/components/enterBuildingDiv.vue","mtime":1611949618001},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNidWlsZGluZ0VudGVyQWRtaW5PclVzZXIgewogIHdpZHRoOiAzMDBweDsKfQoKLmJ1aWxkaW5nTGlzdCB7CiAgbWFyZ2luOiA1cHg7Cn0KLnRpdGxlIHsKICBjb2xvcjogd2hpdGU7CiAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTsKICBwYWRkaW5nOiA1cHg7Cn0K"},{"version":3,"sources":["/home/woli/Projects/DataRoom/frontend/src/components/enterBuildingDiv.vue"],"names":[],"mappings":";AA+lBA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACxB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACd;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACb;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd","file":"/home/woli/Projects/DataRoom/frontend/src/components/enterBuildingDiv.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"center-align\">\n    <span v-if=\"currently.building\">{{ currently.building[\"building_name\"] }}</span>\n    <span v-if=\"currently.floor\"> > {{ currently.floor[\"floor_name\"] }}</span>\n    <span v-if=\"currently.room\"> > {{ currently.room['room_name'] }}</span>\n  </div>\n  <div v-if=\"currently.building === null\" class=\"col s4 buildingList\">\n    <h3 class=\"center-align title\">Choose building</h3>\n    <ul>\n      <li v-for=\"(item, index) in list.building_list\" :key=\"index\" class=\"list_item\">\n        <a href=\"javascript:void(0)\" v-on:click=\"selectBuilding(item)\">\n          {{ item[\"building_name\"] }}\n        </a>\n      </li>\n    </ul>\n  </div>\n  <div v-if=\"currently.building !== null && currently.floor === null\" class=\"col s4\">\n    <h3 class=\"center-align title\">Choose floor</h3>\n    <ul>\n      <li v-for=\"(item, index) in list.floor_list\" :key=\"index\" class=\"list_item\">\n        <a v-if=\"item['isAdmin'] === true || item['isUser'] === true || item['isSuper'] === true || item['public'] === true\" href=\"javascript:void(0)\" v-on:click=\"enterFloor(item)\">\n          {{ item[\"floor_name\"] }}\n        </a>\n        <a v-else>{{  item[\"floor_name\"] }} [X]</a>\n      </li>\n    </ul>\n  </div>\n  <div v-if=\"currently.floor !== null && currently.room === null\" class=\"col s4\">\n    <h3 class=\"center-align title\">Choose room</h3>\n    <ul>\n      <li v-for=\"(item, index) in list.room_list\" :key=\"index\" class=\"list_item\">\n        <a href=\"javascript:void(0)\" v-on:click=\"enterRoom(item)\" >{{ item['room_name'] }}</a>\n      </li>\n    </ul>\n    <div v-if=\"this.currently.floor['isAdmin'] === true\" class=\"row\">\n      <hr style=\"color:deepskyblue; width: 70%\"/>\n        <h5>Floor administrator panel</h5>\n      <button v-on:click=\"changeActiveForm('createRoom')\" type=\"button\" class=\"btn blue darken-2\">Create room</button>\n      <button v-on:click=\"changeActiveForm('deleteRoom')\" type=\"button\" class=\"btn blue lighten-2\">Delete room</button>\n      <button v-on:click=\"changeActiveForm('manageRoomPermission')\" type=\"button\" class=\"btn blue darken-2\">Manage room permissions</button>\n      <button v-on:click=\"changeActiveForm('manageFloorPermission')\" type=\"button\" class=\"btn blue lighten-2\">Manage floor permissions</button>\n    </div>\n    <div v-else-if=\"this.currently.floor['everybodyCanCreateRoom'] === true\">\n      <button v-on:click=\"changeActiveForm('createRoom')\" type=\"button\" class=\"btn blue darken-2\">Create room</button>\n    </div>\n    <form action=\"javascript:void(0)\" v-on:submit=\"addRoom\" id=\"CREATE_ROOM_FORM\" v-if=\"activeForm === 'createRoom'\">\n      <div class=\"row\">\n        <div class=\"input-field col s6\">\n          <i class=\"material-icons prefix\">domain</i>\n          <input class=\"validate\" id=\"createRoomName\" type=\"text\" required/>\n          <label for=\"createRoomName\" class=\"active\">Room name</label>\n        </div>\n        <div class=\"col s6\">\n          <div class=\"row input-field\" style=\"margin-bottom: 25px;\">\n            <input type=\"checkbox\" id=\"createRoomPermission_public\"/>\n            <label for=\"createRoomPermission_public\">Public</label>\n          </div>\n          <div class=\"row input-field\" style=\"margin-bottom: 25px;\">\n            <input type=\"checkbox\" id=\"createRoomPermission_hidden\"/>\n            <label for=\"createRoomPermission_hidden\">Hidden</label>\n          </div>\n        </div>\n        <div class=\"input-field col s6\">\n          <button type=\"submit\" class=\"btn blue\">Create room</button>\n        </div>\n      </div>\n    </form>\n    <form action=\"javascript:void(0)\" v-on:submit=\"deleteRoom\" id=\"DELETE_ROOM_FORM\" v-if=\"activeForm === 'deleteRoom'\">\n      <div class=\"col s10\">\n        <select id=\"deleteRoomSelect\" v-model=\"DELETE_ROOM_DATA.selected_room_to_delete\">\n          <option value=\"\" disabled>Select room to delete</option>\n          <option v-for=\"(item, index) in DELETE_ROOM_DATA.room_list\" :key=\"index\" :value=\"item\">{{item}}</option>\n        </select>\n        <button v-if=\"DELETE_ROOM_DATA.selected_room_to_delete !== ''\" type=\"submit\" class=\"btn blue\">Delete room</button>\n      </div>\n    </form>\n    <form action=\"javascript:void(0)\"  id=\"MANAGE_FLOOR_PERMISSION_FORM\" v-if=\"activeForm === 'manageFloorPermission'\">\n      <div class=\"row\">\n        <div class=\"col s6\">\n          <select id=\"addUToFloorSelect\" v-model=\"MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_add_to_floor\">\n            <option value=\"\" disabled>Select user to add</option>\n            <option v-for=\"(item, index) in MANAGE_FLOOR_PERMISSION_DATA.building_users_not_in_floor\" :key=\"index\" :value=\"item\">{{item['email']}} - {{item['first_name']}} {{item['second_name']}}</option>\n          </select>\n          <button v-if=\"MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_add_to_floor !== ''\" v-on:click=\"addUserToFloor\" type=\"button\" class=\"btn blue\">Add user to floor</button>\n        </div>\n        <div class=\"col s6\">\n          <select id=\"removeUFromFloorSelect\" v-model=\"MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_remove_from_floor\">\n            <option value=\"\" disabled>Select user to delete</option>\n            <option v-for=\"(item, index) in MANAGE_FLOOR_PERMISSION_DATA.floor_users\" :key=\"index\" :value=\"item\">{{item['email']}} - {{item['first_name']}} {{item['second_name']}}</option>\n          </select>\n          <button v-if=\"MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_remove_from_floor !== ''\" v-on:click=\"deleteUserFromFloor\" type=\"button\" class=\"btn blue\">Delete user from floor</button>\n        </div>\n      </div>\n    </form>\n    <form action=\"javascript:void(0)\" id=\"MANAGE_ROOM_PERMISSION_FORM\" v-if=\"activeForm === 'manageRoomPermission'\">\n      <div class=\"col s10\">\n          <select id=\"managePermissionSelectRoom\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_room\" v-on:change=\"selectRoomToManage\">\n            <option value=\"\" disabled>Select room to manage</option>\n            <option v-for=\"(item, index) in MANAGE_ROOM_PERMISSION_DATA.room_list\" :key=\"index\" :value=\"item\">{{ item }}</option>\n          </select>\n      </div>\n      <div class=\"row\" v-if=\"MANAGE_ROOM_PERMISSION_DATA.selected_room !== ''\">\n        <hr style=\"color: deepskyblue; width: 75%;\">\n        <div class=\"col s6\">\n          <div id=\"settings\">\n            <h6>Room settings</h6>\n            <div class=\"col s6\">\n            <div class=\"row input-field\" style=\"margin-left: 25px; margin-bottom: 25px;\">\n              <input type=\"checkbox\" id=\"managePermission_public\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_setting_public\"/>\n              <label for=\"managePermission_public\">Public</label>\n            </div>\n            <div class=\"row input-field\" style=\"margin-left: 25px; margin-bottom: 25px;\">\n              <input type=\"checkbox\" id=\"managePermission_hidden\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_setting_hidden\"/>\n              <label for=\"managePermission_hidden\">Hidden</label>\n            </div>\n          </div>\n            <div class=\"col s6\">\n            <div class=\"row\"/>\n            <div class=\"row\"/>\n            <button type=\"button\" class=\"btn blue\" v-on:click=\"updateRoomSettings\" style=\"margin-bottom: 25px;\">Update settings</button>\n          </div>\n          </div>\n        </div>\n        <div class=\"col s6\">\n          <div id=\"deleteFRoom\">\n            <h6>Delete user from room</h6>\n            <select id=\"deleteUserFromRoomSelect\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_user_to_remove_from_room\">\n              <option value=\"\" disabled>Select user to remove from room</option>\n              <option v-for=\"(item, index) in MANAGE_ROOM_PERMISSION_DATA.room_users\" :key=\"index\" :value=\"item\">{{item['email']}} - </option>\n            </select>\n            <button type=\"button\" class=\"btn blue\" v-on:click=\"removeUserFromRoom\">Remove user from room</button>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\" v-if=\"MANAGE_ROOM_PERMISSION_DATA.selected_room !== ''\">\n        <hr style=\"color:deepskyblue; width: 70%\"/>\n        <h6>Add user to room</h6>\n        <div class=\"col s10\">\n          <select id=\"addUserToRoomSelect\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_user_to_add_to_room\">\n            <option value=\"\" disabled>Select user to add to room</option>\n            <option v-for=\"(item, index) in MANAGE_ROOM_PERMISSION_DATA.floor_users_not_in_room\" :key=\"index\" :value=\"item\">{{item['email']}}</option>\n          </select>\n          <div class=\"row input-field\">\n            <div class=\"col s6\">\n              <input type=\"checkbox\" id=\"addUserToFloor_permission_download\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_setting_download\"/>\n              <label for=\"addUserToFloor_permission_download\">User can delete files</label>\n            </div>\n            <div class=\"col s6\">\n              <input type=\"checkbox\" id=\"addUserToFloor_permission_upload\" v-model=\"MANAGE_ROOM_PERMISSION_DATA.selected_setting_upload\"/>\n              <label for=\"addUserToFloor_permission_upload\">User can upload files</label>\n            </div>\n          </div>\n          <button type=\"button\" class=\"btn blue\" v-on:click=\"addUserToRoom\">Add user to room</button>\n        </div>\n      </div>\n    </form>\n  </div>\n  <div v-if=\"currently.room !== null && list.file_list !== null\" class=\"col s4\">\n    <ul>\n      <li v-for=\"(item, index) in list.file_list\" :key=\"index\">\n        {{ item }} <a href=\"javascript:void(0)\" v-on:click=\"downloadFile(item)\">DOWNLOAD</a><a href=\"javascript:void(0)\" v-on:click=\"deleteFile(item)\">DELETE</a>\n      </li>\n    </ul>\n    <input id=\"uploadFileInput\" type=\"file\"/>\n    <button type=\"button\" class=\"btn blue\" v-on:click=\"uploadFile\">UPLOAD FILE</button>\n  </div>\n  <div id=\"buildingEnterAdminOrUser\" class=\"modal\">\n    <div class=\"modal-content\">\n      <h4 class=\"center-align blue-text text-darken-3\">Enter building as:</h4>\n      <button type=\"button\" v-on:click=\"enterBuilding('user')\" class=\"btn btn-large blue lighten-2 left\" style=\"width:125px;\">User</button>\n      <button type=\"button\" v-on:click=\"enterBuilding('admin')\" class=\"btn btn-large blue darken-2 right\" style=\"width:125px;\">Admin</button>\n      <div class=\"row\"/>\n    </div>\n  </div>\n</template>\nu<script>\nimport M from 'materialize-css';\nimport _ from 'lodash';\n\nexport default {\n  name: \"enterBuildingDiv\",\n  data() {\n    return {\n      activeForm: '',\n      list: {\n        building_list: null,\n        floor_list: null,\n        room_list: null,\n        file_list: null,\n      },\n      currently: {\n        building: null,\n        floor: null,\n        room: null,\n      },\n      tmp: {\n        val1: null,\n      },\n      DELETE_ROOM_DATA: {\n        selected_room_to_delete: '',\n        room_list: '',\n      },\n      MANAGE_FLOOR_PERMISSION_DATA: {\n        building_users_not_in_floor: '',\n        selected_user_to_add_to_floor: '',\n        selected_user_to_remove_from_floor: '',\n        floor_users: '',\n      },\n      MANAGE_ROOM_PERMISSION_DATA: {\n        selected_room: '',\n        room_list: '',\n        selected_setting_public: '',\n        selected_setting_hidden: '',\n        selected_user_to_remove_from_room: '',\n        room_users: '',\n        selected_user_to_add_to_room: '',\n        floor_users_not_in_room: '',\n        selected_setting_download: '',\n        selected_setting_upload: '',\n      },\n      ROOM_SECTION: {\n        activeView: '',\n      }\n    }\n  },\n  methods: {\n    async changeActiveForm(what) {\n      if (this.activeForm === what)\n        this.activeForm = '';\n      else {\n        this.activeForm =  what;\n        if (this.activeForm === 'deleteRoom') {\n          await this.$root.getFloorRooms(this.currently.floor[\"floor_name\"], this.currently.building[\"building_name\"]).then((response) => {\n            if (response[0] === true) {\n              this.DELETE_ROOM_DATA.room_list= response[1];\n            } else\n              M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n          });\n          await setTimeout(null, 500);\n          M.FormSelect.init(await document.getElementById('deleteRoomSelect'));\n        }\n        else if (this.activeForm === 'manageRoomPermission') {\n          await this.$root.getFloorRooms(this.currently.floor[\"floor_name\"], this.currently.building[\"building_name\"]).then((response) => {\n            if (response[0] === true) {\n              this.MANAGE_ROOM_PERMISSION_DATA.room_list= response[1];\n            } else\n              M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n          });\n          await setTimeout(null, 500);\n          M.FormSelect.init(document.getElementById('managePermissionSelectRoom'));\n        }\n        else if (this.activeForm === 'manageFloorPermission') {\n          let floor_xml;\n          await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n            if (response[0] === true)\n              floor_xml = response[1];\n            else\n              M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n          });\n          let building_users;\n          await this.$root.LEVELADMIN_getAllUsersForBuilding(this.currently.building['building_name']).then((response) => {\n            if (response[0] === true)\n              building_users = response[1];\n            else\n              M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n          });\n          const parser = new DOMParser();\n          const xml_doc = parser.parseFromString(floor_xml, 'text/xml');\n          const users = xml_doc.getElementsByTagName('user');\n          this.MANAGE_FLOOR_PERMISSION_DATA.building_users_not_in_floor = await _.filter(building_users, (item) => {\n            for (let k = 0; k < users.length; k++) {\n              if (Number(users[k].getAttribute('client_id')) === item['id'])\n                return false;\n            }\n            return true;\n          });\n          this.MANAGE_FLOOR_PERMISSION_DATA.floor_users = await _.filter(building_users, (item) => {\n            for (let k = 0; k < users.length; k++) {\n              if (Number(users[k].getAttribute('client_id')) === item['id'])\n                return true;\n            }\n            return false;\n          });\n          await setTimeout(null, 500);\n          M.FormSelect.init(document.getElementById('addUToFloorSelect'));\n          M.FormSelect.init(document.getElementById('removeUFromFloorSelect'));\n        }\n      }\n    },\n    selectBuilding(building_item) {\n      this.tmp.val1 = building_item;\n      if (building_item[\"isAdmin\"] === false)\n        this.enterBuilding('user');\n      else if (building_item[\"isAdmin\"] === true)\n        M.Modal.init(document.getElementById('buildingEnterAdminOrUser')).open();\n    },\n    async enterRoom(room_name) {\n      this.currently.room = room_name;\n      await this.$root.getFilesInRoom(room_name['room_name'], this.currently.building[\"building_name\"], this.currently.floor[\"floor_name\"]).then((response) => {\n        if (response[0] === true)\n          this.list.file_list = response[1];\n        else\n          M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n      });\n    },\n    async enterFloor(floor_item) {\n      this.currently.floor = floor_item;\n      this.list.room_list = floor_item['room_data'];\n    },\n    async enterBuilding(asWho) {\n      if (this.tmp.val1[\"isAdmin\"] === true)\n        M.Modal.getInstance(document.getElementById('buildingEnterAdminOrUser')).close();\n      if (asWho === 'user') {\n        this.currently.building = this.tmp.val1;\n        await this.getFloorList(this.tmp.val1[\"building_name\"])\n      } else if (asWho === 'admin') {\n        this.$parent.changeView('admin', this.tmp.val1[\"building_name\"]);\n      }\n\n    },\n    async getBuildingList() {\n      await this.$root.getBuildingList().then((response) => {\n        if (response[0] === true)\n          this.list.building_list = response[1];\n        else\n          M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n      });\n    },\n    async getFloorList(name) {\n      await this.$root.getBuildingFloors(name).then((response) => {\n        if (response[0] === false)\n          M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n        else\n          this.list.floor_list = response[1];\n      });\n    },\n    async addRoom() {\n      const roomName = document.getElementById('createRoomName').value;\n      const perm_public = document.getElementById('createRoomPermission_public').checked;\n      const perm_hidden = document.getElementById('createRoomPermission_hidden').checked;\n      await this.$root.LEVELADMIN_createRoom(roomName, this.currently.floor[\"floor_name\"], this.currently.building[\"building_name\"], perm_public, perm_hidden).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'Room has been created', classes: \"rounded green\", displayLength: 2000});\n          await this.enterFloor(this.currently.floor);\n          this.activeForm = '';\n        } else\n          M.toast({html: response[1], classes: \"rounded orange\", displayLength: 2000});\n      });\n    },\n    async deleteRoom() {\n      await this.$root.LEVELADMIN_deleteRoom(this.currently.building['building_name'], this.currently.floor['floor_name'], this.DELETE_ROOM_DATA.selected_room_to_delete).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'Room has been deleted', classes: 'rounded green', displayLength: 2000});\n          await this.enterFloor(this.currently.floor);\n          this.activeForm = '';\n        } else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n    },\n    async addUserToFloor() {\n      const parser = new DOMParser();\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      let xml_doc = parser.parseFromString(xml_string, 'text/xml');\n      let new_node = xml_doc.createElement('user');\n      new_node.setAttribute('client_id', String(this.MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_add_to_floor['id']));\n      xml_doc.getElementsByTagName('users')[0].appendChild(new_node);\n      await this.$root.LEVELADMIN_update_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name'], xml_doc).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'User has been added to floor', classes: 'rounded green', displayLength: 2000});\n          this.MANAGE_FLOOR_PERMISSION_DATA = {\n            building_users_not_in_floor: '',\n            selected_user_to_add_to_floor: '',\n            selected_user_to_remove_from_floor: '',\n            floor_users: ''};\n          await this.changeActiveForm('');\n        } else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n    },\n    async deleteUserFromFloor() {\n      const parser = new DOMParser();\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      let xml_doc = parser.parseFromString(xml_string, 'text/xml');\n      let users = xml_doc.getElementsByTagName('user');\n      let i = 0;\n      for (; i < users.length; i++) {\n        if (Number(users[i].getAttribute('client_id')) === this.MANAGE_FLOOR_PERMISSION_DATA.selected_user_to_remove_from_floor['id']) {\n          break;\n        }\n      }\n      users[i].parentNode.removeChild(users[i]);\n      await this.$root.LEVELADMIN_update_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name'], xml_doc).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'User has been removed from floor', classes: 'rounded green', displayLength: 2000});\n          this.MANAGE_FLOOR_PERMISSION_DATA = {\n            building_users_not_in_floor: '',\n            selected_user_to_add_to_floor: '',\n            selected_user_to_remove_from_floor: '',\n            floor_users: ''};\n          await this.changeActiveForm('');\n        } else M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n    },\n    async selectRoomToManage() {\n      let building_users;\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({ html: response[1], classes: 'rounded orange', displayLength: 2000 });\n      });\n      await this.$root.LEVELADMIN_getAllUsersForBuilding(this.currently.building['building_name']).then((response) => {\n        if (response[0] === true)\n          building_users = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      const parser = new DOMParser();\n      const xml_doc = parser.parseFromString(xml_string, 'text/xml');\n      const rooms = xml_doc.getElementsByTagName('room');\n      let i = 0;\n      for (; i < rooms.length; i++) {\n        if (rooms[i].getAttribute('room_name') === this.MANAGE_ROOM_PERMISSION_DATA.selected_room)\n          break;\n      }\n      (rooms[i].getAttribute('public') === 'True') ? this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_public = true : this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_public = false;\n      (rooms[i].getAttribute('hidden') === 'True') ? this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_hidden = true : this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_hidden = false;\n      const users_in_room = rooms[i].getElementsByTagName('user');\n      this.MANAGE_ROOM_PERMISSION_DATA.floor_users_not_in_room = await _.filter(building_users, (item) => {\n        for (let j = 0; j < users_in_room.length; j++) {\n          if (Number(item['id'] === Number(users_in_room[j].getAttribute('client_id'))))\n            return false;\n        }\n        return true;\n      });\n      this.MANAGE_ROOM_PERMISSION_DATA.room_users = await _.filter(building_users, (item) => {\n        for (let j = 0; j < users_in_room.length; j++) {\n          if (Number(item['id'] === Number(users_in_room[j].getAttribute('client_id'))))\n            return true;\n        }\n        return false;\n      });\n      await setTimeout(null, 500);\n      M.FormSelect.init(document.getElementById('addUserToRoomSelect'));\n      M.FormSelect.init(document.getElementById('deleteUserFromRoomSelect'));\n    },\n    async updateRoomSettings() {\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      const parser = new DOMParser();\n      let root = parser.parseFromString(xml_string, 'text/xml');\n      let rooms = root.getElementsByTagName('room');\n      for (let i = 0; i < rooms.length; i++) {\n        if (rooms[i].getAttribute('room_name') === this.MANAGE_ROOM_PERMISSION_DATA.selected_room) {\n          (this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_public === true) ? rooms[i].setAttribute('public', 'True') : rooms[i].setAttribute('public', 'False');\n          (this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_hidden === true) ? rooms[i].setAttribute('hidden', 'True') : rooms[i].setAttribute('hidden', 'False');\n        }\n      }\n      await this.$root.LEVELADMIN_update_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name'], root).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'Room settings has been updated', classes: 'rounded green', displayLength: 2000});\n          await this.changeActiveForm('');\n          this.MANAGE_ROOM_PERMISSION_DATA = {\n            selected_room: '',\n            room_list: '',\n            selected_setting_public: '',\n            selected_setting_hidden: '',\n            selected_user_to_remove_from_room: '',\n            room_users: '',\n            selected_user_to_add_to_room: '',\n            floor_users_not_in_room: '',\n            selected_setting_download: '',\n            selected_setting_upload: '',\n          }\n        } else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n    },\n    async addUserToRoom() {\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      const parser = new DOMParser();\n      const root = parser.parseFromString(xml_string, 'text/xml');\n      const rooms = root.getElementsByTagName('room');\n      let i = 0;\n      for (; i < rooms.length; i++) {\n        if (rooms[i].getAttribute('room_name') === this.MANAGE_ROOM_PERMISSION_DATA.selected_room)\n          break;\n      }\n      let new_node = root.createElement('user');\n      new_node.setAttribute('client_id', String(this.MANAGE_ROOM_PERMISSION_DATA.selected_user_to_add_to_room['id']));\n      new_node.setAttribute('download', (this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_download === true) ? \"True\" : \"False\");\n      new_node.setAttribute('upload', (this.MANAGE_ROOM_PERMISSION_DATA.selected_setting_upload === true) ? \"True\" : \"False\");\n      rooms[i].appendChild(new_node);\n      await this.$root.LEVELADMIN_update_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name'], root).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({ html: 'User has been added to room' });\n          await this.changeActiveForm('');\n          this.MANAGE_ROOM_PERMISSION_DATA = {\n            selected_room: '',\n            room_list: '',\n            selected_setting_public: '',\n            selected_setting_hidden: '',\n            selected_user_to_remove_from_room: '',\n            room_users: '',\n            selected_user_to_add_to_room: '',\n            floor_users_not_in_room: '',\n            selected_setting_download: '',\n            selected_setting_upload: '',\n          }\n        } else\n          M.toast({ html: response[1], classes: 'rounded orange', displayLength: 2000 });\n      })\n    },\n    async removeUserFromRoom() {\n      let xml_string;\n      await this.$root.LEVELADMIN_get_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name']).then((response) => {\n        if (response[0] === true)\n          xml_string = response[1];\n        else\n          M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n      const parser = new DOMParser();\n      let root = parser.parseFromString(xml_string, 'text/xml');\n      let rooms = root.getElementsByTagName('room');\n      let i = 0;\n      for(; i < rooms.length ; i++) {\n        if (rooms[i].getAttribute('room_name') === this.MANAGE_ROOM_PERMISSION_DATA.selected_room)\n          break;\n      }\n      let users_in_room = rooms[i].getElementsByTagName('user');\n      let j = 0;\n      for(; j < users_in_room.length; j++) {\n        if (Number(users_in_room[j].getAttribute('client_id')) === this.MANAGE_ROOM_PERMISSION_DATA.selected_user_to_remove_from_room['id'])\n          break;\n      }\n      users_in_room[j].parentNode.removeChild(users_in_room[j]);\n      await this.$root.LEVELADMIN_update_floor_xml(this.currently.building['building_name'], this.currently.floor['floor_name'], root).then(async (response) => {\n        if (response[0] === true) {\n          M.toast({html: 'User has been removed from floor', classes: 'rounded green', displayLength: 2000});\n          this.MANAGE_ROOM_PERMISSION_DATA = {\n            building_users_not_in_floor: '',\n            selected_user_to_add_to_floor: '',\n            selected_user_to_remove_from_floor: '',\n            floor_users: ''};\n          await this.changeActiveForm('');\n        } else M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n      });\n    },\n    async uploadFile() {\n      const file = document.getElementById('uploadFileInput');\n      if (file.files[0] === undefined)\n        M.toast({ html: 'You have to select file to upload ', classes: 'rounded orange', displayLength: 2000 });\n      else {\n        await this.$root.USER_uploadFile(this.currently.building['building_name'], this.currently.floor['floor_name'], this.currently.room['room_name'], file).then(async (response) => {\n          if (response[0] === true) {\n            M.toast({html: 'File has been uploaded'});\n            await this.enterRoom(this.currently.room);\n          } else\n            M.toast({html: response[1], classes: 'rounded orange', displayLength: 2000});\n        });\n      }\n    },\n    async downloadFile(item) {\n      let file;\n      await this.$root.USER_download_file(this.currently.building['building_name'], this.currently.floor['floor_name'], this.currently.room['room_name'], item).then((response) => {\n        if (response[0] === true)\n          file = response[1]\n        else\n          M.toast({ html: 'Cannot download this file', classes: 'rounded green', displayLength: 2000 });\n      });\n      console.log(file);\n    },\n    async deleteFile() {\n\n    }\n  },\n    async beforeMount() {\n      await this.getBuildingList();\n    }\n}\n</script>\n\n<style scoped>\n#buildingEnterAdminOrUser {\n  width: 300px;\n}\n\n.buildingList {\n  margin: 5px;\n}\n.title {\n  color: white;\n  background-color: blue;\n  padding: 5px;\n}\n</style>"]}]}