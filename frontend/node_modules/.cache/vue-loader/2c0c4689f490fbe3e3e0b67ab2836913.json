{"remainingRequest":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/woli/Projects/DataRoom/frontend/src/App.vue?vue&type=style&index=0&id=7ba5bd90&lang=css","dependencies":[{"path":"/home/woli/Projects/DataRoom/frontend/src/App.vue","mtime":1611952583535},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/woli/Projects/DataRoom/frontend/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmJvZHkgewogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnYXNzZXRzL2F6dXJlLTYuanBnJyk7Cn0K"},{"version":3,"sources":["/home/woli/Projects/DataRoom/frontend/src/App.vue"],"names":[],"mappings":";AAwZA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C","file":"/home/woli/Projects/DataRoom/frontend/src/App.vue","sourceRoot":"","sourcesContent":["<!--todo: po usunieciu klienta z budynku trzeba go usunac z kazdego xmla-->\n\n\n<template>\n  <AuthView v-if=\"session_token === null\" />\n  <AppView v-if=\"session_token !== null\" />\n</template>\n\n<script>\nimport AuthView from \"@/components/AuthView.vue\";\nimport AppView from \"@/components/AppView\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  computed: {\n    console: () => console\n  },\n  components: {\n    AppView,\n    AuthView,\n  },\n  methods: {\n    //AUTH REQUESTS//\n    async AUTH_registerUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/create'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_loginUser(email, password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/login'), {\n        email: email,\n        password: password\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_sendPasswordResetEmail() {\n      let result = [false, ''];\n      let email = document.getElementById('passwordEmail').value;\n      await axios.get(this.backend_url.concat('/mail/', email, '/send/link')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async AUTH_logoutUser() {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/client/', this.session_token, '/logout')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_changeUserEmail(new_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/email'), {email: new_email}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_changeUserPassword(new_password) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/password'), {password: new_password}).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async SETTINGS_updateUserProfile(first_name, second_name, phone_number, birth_date) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/client/', this.session_token, '/update/profile'), {\n        first_name: first_name,\n        second_name: second_name,\n        phone_number: phone_number,\n        birth_date: birth_date\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //USER REQUESTS//\n    async USER_getUserProfile() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/client/', this.session_token, '/get/profile')).then((response) => {\n        if (response.status === 200)\n          result[0] = true\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async USER_uploadFile(building_name, floor_name, room_name, file) {\n      let result = [false, ''];\n      const form_data = new FormData();\n      form_data.append('file', file.files[0]);\n      await axios.post(this.backend_url.concat('/application/user/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/upload/', file.files[0].name), form_data,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async USER_download_file(building_name, floor_name, room_name, file_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/download/', file_name)).then((response) => {\n        console.log(response);\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingList() {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/getlist')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n\n    },\n    async createBuilding(building_name) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/user/', this.session_token, '/create/building'), {\n        name: building_name,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getBuildingFloors(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token,'/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getFloorRooms(floorName, buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/get/rooms')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async getFilesInRoom(room_name, building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/user/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/get/files')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //ADMIN REQUESTS//\n    async ADMIN_addFloorToBuilding(buildingName, floorName, floorPermissions) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/create/floor'), {\n        floorName: floorName,\n        defaultPermissions: floorPermissions,\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllFloorsForBuilding(buildingName) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', buildingName, '/get/floors')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeFloor(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getAllUsersForBuilding(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/get/users')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_removeUserFromBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/', target_email,'/remove')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_addUserToBuilding(building_name, target_email) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/user/add'), {\n        target_email: target_email\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getFullFloorData(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/get/data'),).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_update_floor_xml_document(building_name, floor_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async ADMIN_getBuildingXML(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/get/data')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n},\n    async ADMIN_update_building_xml_document(building_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/admin/', this.session_token, '/building/', building_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    //LEVEL_ADMIN REQUESTS//\n    async LEVELADMIN_deleteRoom(building_name, floor_name, room_name) {\n      let result = [false, ''];\n      await axios.put(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/room/', room_name, '/delete')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result\n    },\n    async LEVELADMIN_createRoom(roomName, floorName, buildingName, sett_public, sett_hidden) {\n      let result = [false, ''];\n      await axios.post(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', buildingName, '/floor/', floorName, '/create/room'), {\n        roomName: roomName,\n        public: sett_public,\n        hidden: sett_hidden\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      })\n      return result;\n    },\n    async LEVELADMIN_get_floor_xml(building_name, floor_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/get/data')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data[0]['xml_document'];\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async LEVELADMIN_update_floor_xml(building_name, floor_name, xml_document) {\n      let result = [false, ''];\n      const serializer = new XMLSerializer();\n      const xmlStr = serializer.serializeToString(xml_document);\n      await axios.post(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/floor/', floor_name, '/update/xml'), {\n        xml_document: xmlStr\n      }).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    },\n    async LEVELADMIN_getAllUsersForBuilding(building_name) {\n      let result = [false, ''];\n      await axios.get(this.backend_url.concat('/application/leveladmin/', this.session_token, '/building/', building_name, '/get/users')).then((response) => {\n        if (response.status === 200)\n          result[0] = true;\n        result[1] = response.data;\n      }).catch((error) => {\n        result[1] = error.message;\n      });\n      return result;\n    }\n  },\n  data() {\n    return {\n      session_token: null,\n      backend_url: 'http://127.0.0.1:5000',\n    }\n  },\n}\n</script>\n\n<style>\nbody {\n  background-image: url('assets/azure-6.jpg');\n}\n</style>\n<!--https://dataroom-301309.ew.r.appspot.com-->"]}]}